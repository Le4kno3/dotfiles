####################################################################################
#     _____  _____ __  __   ________  ___   ______________________  _   _______    #
#    /__  / / ___// / / /  / ____/ / / / | / / ____/_  __/  _/ __ \/ | / / ___/    #
#      / /  \__ \/ /_/ /  / /_  / / / /  |/ / /     / /  / // / / /  |/ /\__ \     #
#     / /_____/ / __  /  / __/ / /_/ / /|  / /___  / / _/ // /_/ / /|  /___/ /     #
#    /____/____/_/ /_/  /_/    \____/_/ |_/\____/ /_/ /___/\____/_/ |_//____/      #
#                                                                                  #
####################################################################################

#     ___                        __                                  
#    / (_)___  __  ___  __     _/_/  ____ ___  ____ __________  _____
#   / / / __ \/ / / / |/_/   _/_/   / __ `__ \/ __ `/ ___/ __ \/ ___/
#  / / / / / / /_/ />  <   _/_/    / / / / / / /_/ / /__/ /_/ (__  ) 
# /_/_/_/ /_/\__,_/_/|_|  /_/     /_/ /_/ /_/\__,_/\___/\____/____/  

# Curl time lookup
clookup() {
    lookup_file="$(mktemp)"
    cat <<EOF > "${lookup_file}"
time_namelookup:    %{time_namelookup}\n
time_connect:       %{time_connect}\n
time_appconnect:    %{time_appconnect}\n
time_pretransfer:   %{time_pretransfer}\n
time_redirect:      %{time_redirect}\n
time_starttransfer: %{time_starttransfer}\n
                    --------\n
time_total:         %{time_total}\n
EOF

    curl -s -L $@ -w "@${lookup_file}" -o /dev/null
    rm "${lookup_file}"
}

# curl cheat.sh/command as a command.
chtsh() {
    curl "https://cheat.sh/$*"
}

# Create header for config files.
header() {
    header=$1
    file=$2

    figlet -f slant "${header}" >> "${file}"
}

# Get latest commit hash.
glc() {
    git log \
        --author "$USER" \
        --oneline \
        --decorate \
        --graph \
        --all \
        | awk 'NR==1 {print $2}'
}

# Create and edit executeable python file.
ptest() {
    echo "#!/usr/bin/env python" > ./test.py
    vim ./test.py
    chmod 0700 ./test.py
}

# Create and edit executeable bash file.
tsh() {
    printf "#!/usr/bin/env sh\n" > ./test.sh
    vim ./test.sh
    chmod 0700 ./test.sh
}

# Create README for project.
mkread(){
    [ -f README.md ] && rm README.md
    touch README.md
    printf "# %s\n" "$(pwd | rev | cut -d'/' -f1 | rev)" >> README.md
    echo "Please insert simple description."
    read -r desc
    { printf "> %s\n" "${desc}";
    printf "## Requirements\n";
    printf "## Build\n";
    printf "## Install";
    printf "## Run\n"; } >> README.md
}

# Create new project.
mkpro() {
    [ "$#" -ne 1 ] && printf\
        "Please provide name of project as argument.\nExiting.\n" && return 1
    take "$1"
    unli
    mkread
    printf\
        "Hey! Cool, you started another project.
Please insert the name of the first file\n=>"
    read -r name
    touch "${name}"
}

gccd() {
    git clone "$@"
    dir="$( echo "$@"\
        | rev\
        | cut -d'/' -f1\
        | rev\
        | cut -d'.' -f1)"
    cd "${dir}" || return 1
}

cikitchen() {
    "$(git rev-parse --show-toplevel)/tests/cikitchen" "$@"
}

hp() {
    git commit -am "$@"
    git pull
    git push
}

daily() {
    current_pwd=$PWD
    dir="$HOME/Documents/notes/sys11"
    daily_dir="${dir}/resources/daily"
    today_daily="${daily_dir}/$(date +%d.%m.%Y).md"

    cd "${dir}" || exit 1

    if [ -f "${today_daily}" ]; then
        vim "${today_daily}"
    else
        last_daily="${daily_dir}/$(ls -1 ${daily_dir}/ | sort -n -t'.' -k3 -k2 -k1 | tail -n1)" 
        echo ${last_daily}
        cp "${last_daily}" "${today_daily}"
        vim "${today_daily}"
    fi
    cd "${current_pwd}" || exit 1
}

#     ___                 
#    / (_)___  __  ___  __
#   / / / __ \/ / / / |/_/
#  / / / / / / /_/ />  <  
# /_/_/_/ /_/\__,_/_/|_|  

if [ "$(uname)" = "Linux" ]; then
    # Change monitor settings.
    changemon() {
        monitors="$(xrandr -q | grep -w 'connected' | awk '{ print $1 }')"
        ext_mon="$(echo "${monitors}" | grep -v LVDS)"
        int_mon="$(echo "${monitors}" | grep LVDS)"
        PS3="What setup would you like to run?"
        select choice in "Internal monitor" "External monitor" "Both"; do
            case $choice in
                "Internal monitor" )
                    xrandr --output "${int_mon}" --auto\
                        && sh "$HOME/.fehbg"
                    bspc wm -r
                    break
                    ;;
                "External monitor" )
                    xrandr --output "${ext_mon}" --auto\
                        --output "${int_mon}" --off \
                        && "$HOME/.fehbg"
                    bspc wm -r
                    break
                    ;;
                "Both" )
                    xrandr --output "${ext_mon}" --auto --primary\
                        --output "${int_mon}" --auto --noprimary --below DP1\
                        && "$HOME/.fehbg"
                    bspc wm -r
                    break
                    ;;
                *)
                    echo "Wrong input."
                    return 1
                    break
                    ;;
            esac
        done
    }
fi

# Update exploitdb before running searchsploit.
searchsploit() {
    pwd="$PWD"
    cd /opt/exploitdb || exit 1
    git pull --rebase --quiet
    cd "${pwd}" || exit 1
    /opt/exploitdb/searchsploit "$@"
}

# Update Metasploit-framework before running mfsconsole.
msfconsole() {
    pwd="$PWD"
    cd /opt/metasploit-framework || exit 1
    git stash clear
    cd "${pwd}" || exit 1
    /opt/metasploit-framework/msfupdate > /dev/null 2>&1
    /opt/metasploit-framework/msfconsole "$@"
}
#    ____ ___  ____ __________  _____
#   / __ `__ \/ __ `/ ___/ __ \/ ___/
#  / / / / / / /_/ / /__/ /_/ (__  ) 
# /_/ /_/ /_/\__,_/\___/\____/____/  

if [ "$(uname)" = "Darwin" ]; then
fi

#              __  
#  ____  _____/ /_ 
# /_  / / ___/ __ \
#  / /_(__  ) / / /
# /___/____/_/ /_/ 

_zsh_greeting() {
    if [ "$(uname)" = "Linux" ]; then
        if ! [ -f "$HOME/.local/no_greeting" ]; then

            shello.sh || true
            printf '\nTo disable the message above execute: "%s".\n' \
                'mkdir -p $HOME/.local && touch $HOME/.local/no_greeting'
        fi
    elif [ "$(uname)" = "Darwin" ]; then
        printf "And again. The Os of agony: macOS\n"
    else
        printf "Okay cool. Something different: \033[1;36m%s\n\033[0m" "$(uname)"
    fi
}
